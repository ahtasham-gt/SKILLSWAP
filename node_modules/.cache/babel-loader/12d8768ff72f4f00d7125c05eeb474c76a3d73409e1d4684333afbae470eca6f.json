{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunks\nexport const fetchSwaps = createAsyncThunk('swaps/fetchSwaps', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 600));\n    const currentUser = getState().auth.user;\n\n    // Mock swaps data\n    return [{\n      id: '1',\n      skillId: '2',\n      skillTitle: 'UI/UX Design',\n      requesterId: currentUser.id,\n      requesterName: currentUser.name,\n      requesterAvatar: currentUser.avatar,\n      providerId: '2',\n      providerName: 'Sarah Wilson',\n      providerAvatar: 'https://ui-avatars.com/api/?name=Sarah+Wilson&background=10b981&color=fff',\n      status: 'pending',\n      message: 'I can teach you JavaScript in exchange for UI/UX design lessons!',\n      createdAt: '2024-01-15T10:30:00Z',\n      updatedAt: '2024-01-15T10:30:00Z'\n    }, {\n      id: '2',\n      skillId: '3',\n      skillTitle: 'Python Data Science',\n      requesterId: '3',\n      requesterName: 'Mike Chen',\n      requesterAvatar: 'https://ui-avatars.com/api/?name=Mike+Chen&background=f59e0b&color=fff',\n      providerId: currentUser.id,\n      providerName: currentUser.name,\n      providerAvatar: currentUser.avatar,\n      status: 'accepted',\n      message: 'I would love to learn React from you!',\n      createdAt: '2024-01-14T15:20:00Z',\n      updatedAt: '2024-01-14T16:45:00Z'\n    }];\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const createSwapRequest = createAsyncThunk('swaps/createSwapRequest', async (swapData, {\n  getState\n}) => {\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const currentUser = getState().auth.user;\n    const newSwap = {\n      id: Date.now().toString(),\n      ...swapData,\n      requesterId: currentUser.id,\n      requesterName: currentUser.name,\n      requesterAvatar: currentUser.avatar,\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    return newSwap;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const updateSwapStatus = createAsyncThunk('swaps/updateSwapStatus', async ({\n  swapId,\n  status\n}, {\n  getState\n}) => {\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      swapId,\n      status,\n      updatedAt: new Date().toISOString()\n    };\n  } catch (error) {\n    throw error;\n  }\n});\nconst initialState = {\n  swaps: [],\n  loading: false,\n  error: null,\n  filters: {\n    status: '',\n    type: 'all' // 'sent', 'received', 'all'\n  }\n};\nconst swapsSlice = createSlice({\n  name: 'swaps',\n  initialState,\n  reducers: {\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    addMessage: (state, action) => {\n      const {\n        swapId,\n        message\n      } = action.payload;\n      const swap = state.swaps.find(s => s.id === swapId);\n      if (swap) {\n        if (!swap.messages) swap.messages = [];\n        swap.messages.push({\n          id: Date.now().toString(),\n          message,\n          senderId: action.payload.senderId,\n          createdAt: new Date().toISOString()\n        });\n        swap.updatedAt = new Date().toISOString();\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch Swaps\n    .addCase(fetchSwaps.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchSwaps.fulfilled, (state, action) => {\n      state.loading = false;\n      state.swaps = action.payload;\n    }).addCase(fetchSwaps.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Create Swap Request\n    .addCase(createSwapRequest.pending, state => {\n      state.loading = true;\n    }).addCase(createSwapRequest.fulfilled, (state, action) => {\n      state.loading = false;\n      state.swaps.unshift(action.payload);\n    }).addCase(createSwapRequest.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // Update Swap Status\n    .addCase(updateSwapStatus.fulfilled, (state, action) => {\n      const swap = state.swaps.find(s => s.id === action.payload.swapId);\n      if (swap) {\n        swap.status = action.payload.status;\n        swap.updatedAt = action.payload.updatedAt;\n      }\n    });\n  }\n});\nexport const {\n  setFilters,\n  clearError,\n  addMessage\n} = swapsSlice.actions;\nexport default swapsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchSwaps","_","getState","rejectWithValue","Promise","resolve","setTimeout","currentUser","auth","user","id","skillId","skillTitle","requesterId","requesterName","name","requesterAvatar","avatar","providerId","providerName","providerAvatar","status","message","createdAt","updatedAt","error","createSwapRequest","swapData","newSwap","Date","now","toString","toISOString","updateSwapStatus","swapId","initialState","swaps","loading","filters","type","swapsSlice","reducers","setFilters","state","action","payload","clearError","addMessage","swap","find","s","messages","push","senderId","extraReducers","builder","addCase","pending","fulfilled","rejected","unshift","actions","reducer"],"sources":["D:/projects/skillswap/src/store/slices/swapsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// Async thunks\r\nexport const fetchSwaps = createAsyncThunk(\r\n  'swaps/fetchSwaps',\r\n  async (_, { getState, rejectWithValue }) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 600));\r\n      \r\n      const currentUser = getState().auth.user;\r\n      \r\n      // Mock swaps data\r\n      return [\r\n        {\r\n          id: '1',\r\n          skillId: '2',\r\n          skillTitle: 'UI/UX Design',\r\n          requesterId: currentUser.id,\r\n          requesterName: currentUser.name,\r\n          requesterAvatar: currentUser.avatar,\r\n          providerId: '2',\r\n          providerName: 'Sarah Wilson',\r\n          providerAvatar: 'https://ui-avatars.com/api/?name=Sarah+Wilson&background=10b981&color=fff',\r\n          status: 'pending',\r\n          message: 'I can teach you JavaScript in exchange for UI/UX design lessons!',\r\n          createdAt: '2024-01-15T10:30:00Z',\r\n          updatedAt: '2024-01-15T10:30:00Z'\r\n        },\r\n        {\r\n          id: '2',\r\n          skillId: '3',\r\n          skillTitle: 'Python Data Science',\r\n          requesterId: '3',\r\n          requesterName: 'Mike Chen',\r\n          requesterAvatar: 'https://ui-avatars.com/api/?name=Mike+Chen&background=f59e0b&color=fff',\r\n          providerId: currentUser.id,\r\n          providerName: currentUser.name,\r\n          providerAvatar: currentUser.avatar,\r\n          status: 'accepted',\r\n          message: 'I would love to learn React from you!',\r\n          createdAt: '2024-01-14T15:20:00Z',\r\n          updatedAt: '2024-01-14T16:45:00Z'\r\n        }\r\n      ];\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const createSwapRequest = createAsyncThunk(\r\n  'swaps/createSwapRequest',\r\n  async (swapData, { getState }) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const currentUser = getState().auth.user;\r\n      const newSwap = {\r\n        id: Date.now().toString(),\r\n        ...swapData,\r\n        requesterId: currentUser.id,\r\n        requesterName: currentUser.name,\r\n        requesterAvatar: currentUser.avatar,\r\n        status: 'pending',\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      return newSwap;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateSwapStatus = createAsyncThunk(\r\n  'swaps/updateSwapStatus',\r\n  async ({ swapId, status }, { getState }) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      return { swapId, status, updatedAt: new Date().toISOString() };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  swaps: [],\r\n  loading: false,\r\n  error: null,\r\n  filters: {\r\n    status: '',\r\n    type: 'all' // 'sent', 'received', 'all'\r\n  }\r\n};\r\n\r\nconst swapsSlice = createSlice({\r\n  name: 'swaps',\r\n  initialState,\r\n  reducers: {\r\n    setFilters: (state, action) => {\r\n      state.filters = { ...state.filters, ...action.payload };\r\n    },\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    addMessage: (state, action) => {\r\n      const { swapId, message } = action.payload;\r\n      const swap = state.swaps.find(s => s.id === swapId);\r\n      if (swap) {\r\n        if (!swap.messages) swap.messages = [];\r\n        swap.messages.push({\r\n          id: Date.now().toString(),\r\n          message,\r\n          senderId: action.payload.senderId,\r\n          createdAt: new Date().toISOString()\r\n        });\r\n        swap.updatedAt = new Date().toISOString();\r\n      }\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch Swaps\r\n      .addCase(fetchSwaps.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchSwaps.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.swaps = action.payload;\r\n      })\r\n      .addCase(fetchSwaps.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      // Create Swap Request\r\n      .addCase(createSwapRequest.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(createSwapRequest.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.swaps.unshift(action.payload);\r\n      })\r\n      .addCase(createSwapRequest.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      // Update Swap Status\r\n      .addCase(updateSwapStatus.fulfilled, (state, action) => {\r\n        const swap = state.swaps.find(s => s.id === action.payload.swapId);\r\n        if (swap) {\r\n          swap.status = action.payload.status;\r\n          swap.updatedAt = action.payload.updatedAt;\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setFilters, clearError, addMessage } = swapsSlice.actions;\r\nexport default swapsSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,UAAU,GAAGD,gBAAgB,CACxC,kBAAkB,EAClB,OAAOE,CAAC,EAAE;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,MAAME,WAAW,GAAGL,QAAQ,CAAC,CAAC,CAACM,IAAI,CAACC,IAAI;;IAExC;IACA,OAAO,CACL;MACEC,EAAE,EAAE,GAAG;MACPC,OAAO,EAAE,GAAG;MACZC,UAAU,EAAE,cAAc;MAC1BC,WAAW,EAAEN,WAAW,CAACG,EAAE;MAC3BI,aAAa,EAAEP,WAAW,CAACQ,IAAI;MAC/BC,eAAe,EAAET,WAAW,CAACU,MAAM;MACnCC,UAAU,EAAE,GAAG;MACfC,YAAY,EAAE,cAAc;MAC5BC,cAAc,EAAE,2EAA2E;MAC3FC,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAE,kEAAkE;MAC3EC,SAAS,EAAE,sBAAsB;MACjCC,SAAS,EAAE;IACb,CAAC,EACD;MACEd,EAAE,EAAE,GAAG;MACPC,OAAO,EAAE,GAAG;MACZC,UAAU,EAAE,qBAAqB;MACjCC,WAAW,EAAE,GAAG;MAChBC,aAAa,EAAE,WAAW;MAC1BE,eAAe,EAAE,wEAAwE;MACzFE,UAAU,EAAEX,WAAW,CAACG,EAAE;MAC1BS,YAAY,EAAEZ,WAAW,CAACQ,IAAI;MAC9BK,cAAc,EAAEb,WAAW,CAACU,MAAM;MAClCI,MAAM,EAAE,UAAU;MAClBC,OAAO,EAAE,uCAAuC;MAChDC,SAAS,EAAE,sBAAsB;MACjCC,SAAS,EAAE;IACb,CAAC,CACF;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOtB,eAAe,CAACsB,KAAK,CAACH,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,OAAO,MAAMI,iBAAiB,GAAG3B,gBAAgB,CAC/C,yBAAyB,EACzB,OAAO4B,QAAQ,EAAE;EAAEzB;AAAS,CAAC,KAAK;EAChC,IAAI;IACF;IACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,MAAME,WAAW,GAAGL,QAAQ,CAAC,CAAC,CAACM,IAAI,CAACC,IAAI;IACxC,MAAMmB,OAAO,GAAG;MACdlB,EAAE,EAAEmB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzB,GAAGJ,QAAQ;MACXd,WAAW,EAAEN,WAAW,CAACG,EAAE;MAC3BI,aAAa,EAAEP,WAAW,CAACQ,IAAI;MAC/BC,eAAe,EAAET,WAAW,CAACU,MAAM;MACnCI,MAAM,EAAE,SAAS;MACjBE,SAAS,EAAE,IAAIM,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;MACnCR,SAAS,EAAE,IAAIK,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IACpC,CAAC;IAED,OAAOJ,OAAO;EAChB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAGlC,gBAAgB,CAC9C,wBAAwB,EACxB,OAAO;EAAEmC,MAAM;EAAEb;AAAO,CAAC,EAAE;EAAEnB;AAAS,CAAC,KAAK;EAC1C,IAAI;IACF;IACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,OAAO;MAAE6B,MAAM;MAAEb,MAAM;MAAEG,SAAS,EAAE,IAAIK,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IAAE,CAAC;EAChE,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,MAAMU,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,KAAK;EACdZ,KAAK,EAAE,IAAI;EACXa,OAAO,EAAE;IACPjB,MAAM,EAAE,EAAE;IACVkB,IAAI,EAAE,KAAK,CAAC;EACd;AACF,CAAC;AAED,MAAMC,UAAU,GAAG1C,WAAW,CAAC;EAC7BiB,IAAI,EAAE,OAAO;EACboB,YAAY;EACZM,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACL,OAAO,GAAG;QAAE,GAAGK,KAAK,CAACL,OAAO;QAAE,GAAGM,MAAM,CAACC;MAAQ,CAAC;IACzD,CAAC;IACDC,UAAU,EAAGH,KAAK,IAAK;MACrBA,KAAK,CAAClB,KAAK,GAAG,IAAI;IACpB,CAAC;IACDsB,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEV,MAAM;QAAEZ;MAAQ,CAAC,GAAGsB,MAAM,CAACC,OAAO;MAC1C,MAAMG,IAAI,GAAGL,KAAK,CAACP,KAAK,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACxC,EAAE,KAAKwB,MAAM,CAAC;MACnD,IAAIc,IAAI,EAAE;QACR,IAAI,CAACA,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG,EAAE;QACtCH,IAAI,CAACG,QAAQ,CAACC,IAAI,CAAC;UACjB1C,EAAE,EAAEmB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;UACzBT,OAAO;UACP+B,QAAQ,EAAET,MAAM,CAACC,OAAO,CAACQ,QAAQ;UACjC9B,SAAS,EAAE,IAAIM,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;QACpC,CAAC,CAAC;QACFgB,IAAI,CAACxB,SAAS,GAAG,IAAIK,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;MAC3C;IACF;EACF,CAAC;EACDsB,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACxD,UAAU,CAACyD,OAAO,EAAGd,KAAK,IAAK;MACtCA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAAClB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACD+B,OAAO,CAACxD,UAAU,CAAC0D,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDW,OAAO,CAACxD,UAAU,CAAC2D,QAAQ,EAAE,CAAChB,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAAClB,KAAK,GAAGmB,MAAM,CAACC,OAAO;IAC9B,CAAC;IACD;IAAA,CACCW,OAAO,CAAC9B,iBAAiB,CAAC+B,OAAO,EAAGd,KAAK,IAAK;MAC7CA,KAAK,CAACN,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDmB,OAAO,CAAC9B,iBAAiB,CAACgC,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACP,KAAK,CAACwB,OAAO,CAAChB,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC,CAAC,CACDW,OAAO,CAAC9B,iBAAiB,CAACiC,QAAQ,EAAE,CAAChB,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAAClB,KAAK,GAAGmB,MAAM,CAACnB,KAAK,CAACH,OAAO;IACpC,CAAC;IACD;IAAA,CACCkC,OAAO,CAACvB,gBAAgB,CAACyB,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MACtD,MAAMI,IAAI,GAAGL,KAAK,CAACP,KAAK,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACxC,EAAE,KAAKkC,MAAM,CAACC,OAAO,CAACX,MAAM,CAAC;MAClE,IAAIc,IAAI,EAAE;QACRA,IAAI,CAAC3B,MAAM,GAAGuB,MAAM,CAACC,OAAO,CAACxB,MAAM;QACnC2B,IAAI,CAACxB,SAAS,GAAGoB,MAAM,CAACC,OAAO,CAACrB,SAAS;MAC3C;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEkB,UAAU;EAAEI,UAAU;EAAEC;AAAW,CAAC,GAAGP,UAAU,CAACqB,OAAO;AACxE,eAAerB,UAAU,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}